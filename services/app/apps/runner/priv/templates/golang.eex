package main

import (
  "encoding/json"
  "fmt"
  "os"
  "time"
)

func main() {
  message_ := ""
  executionResults_ := []string{}

  var start_ time.Time
  var result_ interface{}
  var executionTime_ interface{}

  <%= for %{arguments: arguments, index: i} <- checks do %>
    <%= for %{defining: defining, value: value} <- arguments.info do %>
      var <%= defining %> = <%= value %>
    <% end %>

    start_ = time.Now()
    result_ = solution(<%= arguments.expression %>)
    executionTime_ = time.Now().Sub(start_)
    message_ = buildResultMessage(result_, executionTime_)

    executionResults_ = append(executionResults_, message_)
  <% end %>

  for _, m_ := range executionResults_ {
    sendMessage(m_)
  }
}

func buildResultMessage(result, executionTime interface{}) string {
    return fmt.Sprintf(`{"type": "result", "value": %s, "execution_time": %s}`, toJSON(result), toJSON(executionTime))
}


func toJSON(data interface{}) []byte {
	result, err := json.Marshal(data)
	if err != nil {
		fmt.Println("Marshaler error")
		os.Exit(0)
	}
	return result
}

func sendMessage(message string) {
  fmt.Println(message);
}
