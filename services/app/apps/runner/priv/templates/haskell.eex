#!/usr/local/bin/runghc
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE OverloadedStrings #-}
import qualified Data.Aeson as A
import qualified Data.ByteString.Lazy.Char8 as BS
import Data.HashMap.Lazy
import Control.Exception
import Solution
import System.Exit
import System.CPUTime (getCPUTime)
import Text.Printf (printf)

output = BS.putStrLn . A.encode . A.object
handleSuccess res time = output ["type" A..= ("result" :: String), "value" A..= res, "time" A..= time]
handleRuntimeError e = output ["status" A..= ("error" :: String), "result" A..= show e]

main :: IO ()
main = do

    <%= for %{arguments: arguments, index: i, args_string: args_string} <- checks do %>
    start <- getCPUTime
    let res<%= i %> = solution <%= arguments %>
    end <- getCPUTime
    let time<%= i %> = fromIntegral (end - start) / (10^9) :: Double
    let timeStr<%= i %>  :: String
        timeStr<%= i %>= printf "%f" time<%= i %>

    handleSuccess res<%= i %> timeStr<%= i %>
        `catch` \(e ::ErrorCall) -> handleRuntimeError e
    <% end %>
